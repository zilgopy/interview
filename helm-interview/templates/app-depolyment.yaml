apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Values.app.name }}-app
spec:
  replicas: {{ .Values.app.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{.Values.app.name }}-app
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{.Values.app.name }}-app
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: app
          image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{.Values.app.name }}-db-secret
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{.Values.app.name }}-db-secret
                  key: POSTGRES_PASSWORD
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: {{.Values.app.name }}-db-secret
                  key: POSTGRES_DB
            - name: DB_HOST 
              value: {{.Values.app.name }}-db
            - name: DB_PORT
              value: "{{ .Values.db.service.port }}"
            - name: KUBERNETES
              value: "yes"
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
     
---
apiVersion: v1
kind: Pod
metadata:
  name: {{.Values.app.name }}-db
  labels:
    app.kubernetes.io/name: {{.Values.app.name }}-db
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  containers:
    - name: db
      image: "{{ .Values.db.image.repository }}:{{ .Values.db.image.tag }}"
      imagePullPolicy: Always
      ports:
        - containerPort: {{ .Values.db.service.port }}
      envFrom:
        - secretRef:
            name: {{.Values.app.name }}-db-secret
      volumeMounts:
        - name: initdb
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
  volumes:
    - name: initdb
      configMap:
        name: {{.Values.app.name }}-initdb-config
