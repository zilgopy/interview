name: CI Pipeline

on:
  push:
    tags:
      - "*"

jobs:
  test-and-lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.18

    - name: Install dependencies
      run: go mod download

    - name: Lint with golangci-lint
      uses: golangci/golangci-lint-action@v2
      with:
        version: v1.42.1

    - name: Install PostgreSQL
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql curl

    - name: Start PostgreSQL
      run: |
        sudo service postgresql start

    - name: Configure PostgreSQL
      run: |
        cd /tmp
        sudo -u postgres psql postgres -c "CREATE DATABASE interview;"
        sudo -u postgres psql postgres -c "CREATE USER zhong WITH PASSWORD 'p@ssword';"
        sudo -u postgres psql postgres -c "GRANT ALL PRIVILEGES ON DATABASE interview TO zhong;"
        sudo -u postgres psql postgres -c "  CREATE TABLE query_history (
        id SERIAL PRIMARY KEY,
        client_ip VARCHAR(255),
        domain VARCHAR(255),
        created_at TIMESTAMP,
        addresses JSONB
        );"

    - name: Run tests
      run: |
        go run main.go &
        sleep 3
        curl localhost:3000/health
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: interview
        DB_USER: zhong
        DB_PASSWORD: p@ssword

  build-docker-image:
    runs-on: ubuntu-latest
    needs: test-and-lint

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract tag name
      id: tag_name
      run: |
        echo "::set-output name=tag_name::${GITHUB_REF/refs\/tags\//}"

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: zilgopy/interview:${{ steps.tag_name.outputs.tag_name }}

  package-helm-chart:
    runs-on: ubuntu-latest
    needs: build-docker-image

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Helm
      uses: azure/setup-helm@v1

    - name: Lint Helm chart
      run: |
        helm lint helm-interview

    - name: Install yq
      run: |
        sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.6.3/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
    - name: Update values.yaml
      run: |
        yq eval -i '.image.tag = ${{ steps.tag_name.outputs.tag_name }}' helm-interview/values.yaml

    - name: Package Helm chart
      id: package
      run: |
        
        helm package helm-interview
        echo "::set-output name=chart_path::$(ls *.tgz)"


    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_name.outputs.tag_name }}
        release_name: Release ${{ steps.tag_name.outputs.tag_name }}
        draft: false
        prerelease: false

    - name: Upload Helm chart to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.package.outputs.chart_path }}
        asset_name: ${{ steps.package.outputs.chart_path }}
        asset_content_type: application/x-tar
